# -*- coding: utf-8 -*-
"""ANN Project Final Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdUT7tM-WRikl1IvgTDs8R3ytBFn04Le

# **Wind Energy Analysis And Prediction**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import glob
import matplotlib.pyplot as plt
from math import sqrt
from numpy import concatenate
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error,r2_score
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

data = pd.read_excel('/ANN Project Dataset 1.xlsx',index_col="DateTime")
data

data.boxplot(column =['Power generated by system | (kW)'], grid = False)

data.boxplot(column =['Wind speed | (m/s)'], grid = False)

corr = data.corr()
plt.figure(figsize=(10, 8))

ax = sns.heatmap(corr, vmin = -1, vmax = 1, annot = True)
bottom, top = ax.get_ylim()
ax.set_ylim(bottom + 0.5, top - 0.5)
plt.show()
corr

data.info()

data.describe()

sns.pairplot(data)

del data['Pressure | (atm)']
#del data['Wind speed | (m/s)']
del data['Wind direction | (deg)']
del data['Power generated by system | (kW)']
data.head()

dataset = data.values
train_size = int(len(dataset) * 0.60)
test_size = len(dataset) - train_size
train = dataset[0:train_size,:] 
test= dataset[train_size:len(dataset),:]

def create_dataset(dataset, timestep=1):
    dataX, dataY = [], []
    for i in range(len(dataset) - timestep):
        a = dataset[i:(i + timestep), 0]
        dataX.append(a)
        dataY.append(dataset[i + timestep, 0])
    return np.array(dataX), np.array(dataY)

timestep= 8
trainX, trainY = create_dataset(train, timestep)
testX, testY = create_dataset(test, timestep)

trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))
testX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))

trainX.shape

testX.shape

model = Sequential()
model.add(LSTM(100, input_shape=(trainX.shape[1], trainX.shape[2])))
model.add(Dense(1))
model.compile(loss='mae', optimizer='adam')
history=model.fit(trainX, trainY, epochs=500, batch_size=100, validation_data=(testX, testY), verbose=0, shuffle=False)

result = model.predict(testX)

plt.figure(figsize=(20,10))
plt.plot(result[:200], label='PREDICTED')
plt.plot(testY[:200], label='ACTUAL')
plt.title("Output Comparison")
plt.xlabel("Number Of Hours")
plt.ylabel("Wind Speed (m/s)")
plt.legend()
plt.show()

model.summary()

plt.plot(history.history['loss'])
plt.show()

print("Mean squared error: %.3f" % mean_squared_error(testY, result))

print("Root mean squared error: %.3f" % sqrt(mean_squared_error(testY, result)))

print("Variance : %.3f" % r2_score(testY, result))